import numpy as np 
from numpy import linalg

def gaus(a, b):
    n = len(b)
    for k in range(0,n-1):
        for i in range(k+1,n):
            if a[i,k] != 0.0:
                 
                a[i,k+1:n]= a[i,k+1:n] - a[i,k]/a[k,k]*a[k,k+1:n] 
                b[i] = b[i] - a[i,k]/a[k,k]*b[k]
    
    for k in range(n-1,-1,-1):
        b[k] = (b[k] - np.dot(a[k,k+1:n],b[k+1:n]))/a[k,k]
    return b 

        
def jgaus():
    a = np.matrix([[4, 1, 4],[1, 1, 2],[2,1,2]])
    b = np.matrix([[-2],[-1],[0]])
    c = np.linalg.inv(a)*b
    print("Jordan-Gaus Method:")
    print(c)
    print("Check:\n", np.linalg.solve(a,b))

print("Gaus Method:")
print(gaus(np.matrix([[1,2,-1],[3,4,1],[5,1,-3]]), np.matrix([[-3],[1],[-2]])))
jgaus()
